/* Code de l'Arduino 1 - capteurs US + bargraph et vu-mètres
code sous license GPL*/

// définition des broches utilisées //

// capteur amplitude
int trigA = 12; 
int echoA = 11;  
long lecture_echoA; 
int UoutABG,UoutVCA;
long satA=5800; // on définit ici le mode saturation qui est de 1 metre 5800=5,8*1000 mm 
float distmm;

// capteur fréquence
int trigF = 10; 
int echoF = 9; 
long lecture_echoF; 
int UoutF;
int satF=5800;
float distmmF;

int dist_mini=200; // distance minimum des mains par rapport au capteur pour générer du son



void setup() 
{ 
 pinMode(trigA, OUTPUT); // setup capteur amplitude
  digitalWrite(trigA, LOW); 
  pinMode(echoA, INPUT); 
  pinMode(5,OUTPUT);
  pinMode(3,OUTPUT);
 
 pinMode(trigF, OUTPUT); // setup capteur freq
  digitalWrite(trigF, LOW); 
  pinMode(echoF, INPUT);
  pinMode(6,OUTPUT);
   
// Serial.begin(9600);  // pour la liason série afin de vérifier le bon fonctionnement de l'arduino
}


void checkAmpl () // fonction check amplitude
{
  digitalWrite(trigA, HIGH); 
  delayMicroseconds(10); 
  digitalWrite(trigA, LOW); // envoie un pulse de 10 microsecondes d'ultrasons
  lecture_echoA = pulseIn(echoA, HIGH); //mesure le temps que l'onde US met à revenir (distance).
  
  if(lecture_echoA < dist_mini) // condition pour la distance de seuil
  {
  UoutABG=0;
  UoutVCA=255; // la tension de contrôle du VCA est en logique inverse: moins la tension est grande et plus le son est fort
  distmm=0;
  }
  else if((lecture_echoA > 3480) && (lecture_echoA > satA)) // la distance mesurée est trop grande, on coupe le son
    {
    UoutABG=0;
    UoutVCA=255;
    distmm=0;
    }
  else if ((lecture_echoA >= 3480) && (lecture_echoA<= satA)) // fonction saturation
    {
     UoutABG=255;
     UoutVCA=0;
     distmm=600;
    }
  else // fonctionnement linéaire
  {
  UoutVCA=map(lecture_echoA,200,3480,255,0); // converti la distance en 8 bits pour la sortie en PWM --> conversion echo en mm = /5.8 ici max 600 mm
  distmm=(lecture_echoA/5.8);  
  UoutABG=map(lecture_echoA,200,3480,0,255);
  }
  analogWrite (5,UoutVCA);  // tension pour vca, gain négatif
  analogWrite (3,UoutABG);  // Vu-mètre et bar-graph (entrée SIG)
  /*Serial.print("echo Amp: "); 
  Serial.println(lecture_echoA);
  Serial.print("tension: "); 
  Serial.println(UoutABG);
  Serial.print("distance: "); 
  Serial.println(distmm);
  Serial.println("----------------------------------------------------------------------");
  */         //ce morceau de code permet de vérifier le bon fonctionnement des calculs via le moniteur série
}

void checkFreq ()
{
  digitalWrite(trigF, HIGH); 
  delayMicroseconds(10); 
  digitalWrite(trigF, LOW); 
  lecture_echoF = pulseIn(echoF, HIGH); 
  
  if(lecture_echoF < dist_mini) 
  {
  UoutF=0;
  distmmF=0;
  }
  else if((lecture_echoF > 3480) && (lecture_echoF > satF))
    {
    UoutF=0;
    distmmF=0;
    }
      else if ((lecture_echoF >= 3480) && (lecture_echoF<= satF))
      {
      UoutF=255;
      distmmF=600;
      }
  else
  {
  UoutF=map(lecture_echoF,200,3480,0,255); // converti la distance en 8 bits pour la sortie en PWM --> conversion echo en mm = /5.8 ici max 600 mm
  distmmF=(lecture_echoF/5.8);  
  }
  analogWrite (6,UoutF);  // tension pour Arduino 2, Vu-mètre et bar-graph (entrée SIG)
  /*Serial.print("echo freq: "); 
  Serial.println(lecture_echoF);
  Serial.print("tension: "); 
  Serial.println(UoutF);
  Serial.print("distance: "); 
  Serial.println(distmmF);
  Serial.println("///////////////////////////////////////////////////////////////////////////////////////////////");
  */
} 

void loop() 
{ 
checkAmpl();
delay(5);
checkFreq();
delay(5);
  
}
